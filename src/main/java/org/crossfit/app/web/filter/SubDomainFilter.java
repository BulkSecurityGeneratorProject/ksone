package org.crossfit.app.web.filter;


import org.apache.commons.lang.StringUtils;
import org.crossfit.app.domain.CrossFitBox;
import org.crossfit.app.service.CrossFitBoxSerivce;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.inject.Inject;
import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;

import java.io.IOException;

/**
 * This filter is used in production, to serve static resources generated by "grunt build".
 * <p/>
 * <p>
 * It is configured to serve resources from the "dist" directory, which is the Grunt
 * destination directory.
 * </p>
 */
@Component
public class SubDomainFilter implements Filter {

	private static final String ADMIN_VIEW = "/booking.admin.html";
	private static final String BOOKING_VIEW = "/booking.html";

	private static final String BOOKING_SUBDOMAIN = "booking";
	private static final String ADMIN_SUBDOMAIN = "admin";

	@Autowired
	private CrossFitBoxSerivce boxService;

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        // Nothing to initialize
    }

    @Override
    public void destroy() {
        // Nothing to destroy
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        String contextPath = ((HttpServletRequest) request).getContextPath();
        String requestURI = httpRequest.getRequestURI();
        requestURI = StringUtils.substringAfter(requestURI, contextPath);


        if (StringUtils.equals("/", requestURI)) {

        	CrossFitBox box = boxService.findCurrentCrossFitBox();
        	if (box == null){
                chain.doFilter(request, response);
                return;
        	}

            String[] domains = httpRequest.getServerName().split("\\.");

			String subdomain = domains.length > 0 ? domains[0] : httpRequest.getServerName();

			if (subdomain.equals(ADMIN_SUBDOMAIN) || box.getAdminwebsite().equals(httpRequest.getServerName())){
	            request.getRequestDispatcher(ADMIN_VIEW).forward(request, response);
	            return;
			}
			else if(subdomain.equals(BOOKING_SUBDOMAIN) || box.getBookingwebsite().equals(httpRequest.getServerName())){
	            request.getRequestDispatcher(BOOKING_VIEW).forward(request, response);
	            return;
			}

        }

        chain.doFilter(request, response);
    }
}
